/* This file is automatically generated from SProS.idl
 * DO NOT EDIT DIRECTLY OR CHANGES WILL BE LOST!
 */
#ifndef _GUARD_IFACE_SProS
#define _GUARD_IFACE_SProS
#include "cda_compiler_support.h"
#ifdef MODULE_CONTAINS_SProS
#define PUBLIC_SProS_PRE CDA_EXPORT_PRE
#define PUBLIC_SProS_POST CDA_EXPORT_POST
#else
#define PUBLIC_SProS_PRE CDA_IMPORT_PRE
#define PUBLIC_SProS_POST CDA_IMPORT_POST
#endif
#include "Ifacexpcom.hxx"
#include "IfaceDOM_APISPEC.hxx"
#include "IfaceMathML_content_APISPEC.hxx"
namespace iface
{
  namespace SProS
  {
    class Base;
    class BaseSet;
    class BaseIterator;
    class SEDMLElement;
    class NamedElement;
    class NamedElementSet;
    class NamedElementIterator;
    class NamedIdentifiedElement;
    class NamedIdentifiedElementSet;
    class NamedIdentifiedElementIterator;
    class Model;
    class ModelSet;
    class ModelIterator;
    class Simulation;
    class SimulationSet;
    class SimulationIterator;
    class UniformTimeCourse;
    class Task;
    class TaskSet;
    class TaskIterator;
    class DataGenerator;
    class DataGeneratorSet;
    class DataGeneratorIterator;
    class Output;
    class OutputSet;
    class OutputIterator;
    class Plot2D;
    class Plot3D;
    class Report;
    class Change;
    class ChangeSet;
    class ChangeIterator;
    class ComputeChange;
    class ChangeAttribute;
    class AddXML;
    class ChangeXML;
    class RemoveXML;
    class Variable;
    class VariableSet;
    class VariableIterator;
    class Parameter;
    class ParameterSet;
    class ParameterIterator;
    class Curve;
    class CurveSet;
    class CurveIterator;
    class Surface;
    class SurfaceSet;
    class SurfaceIterator;
    class DataSet;
    class DataSetSet;
    class DataSetIterator;
    class RepeatedAnalysis;
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST Bootstrap
     : public virtual iface::XPCOM::IObject
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::Bootstrap"; }
      virtual ~Bootstrap() {}
      virtual already_AddRefd<iface::SProS::SEDMLElement>  createEmptySEDML() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::SProS::SEDMLElement>  parseSEDMLFromURI(const std::wstring& uri, const std::wstring& relativeTo) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::SProS::SEDMLElement>  parseSEDMLFromText(const std::wstring& txt, const std::wstring& baseURI) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::SProS::SEDMLElement>  makeSEDMLFromElement(iface::dom::Element* el) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual std::wstring sedmlToText(iface::SProS::SEDMLElement* el) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST Base
     : public virtual iface::XPCOM::IObject
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::Base"; }
      virtual ~Base() {}
      virtual already_AddRefd<iface::dom::Element>  domElement() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::dom::NodeList>  notes() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::dom::NodeList>  annotations() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::SProS::Base>  parent() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST SProSException : public std::exception
    {
    public:
      SProSException(){}
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST BaseSet
     : public virtual iface::XPCOM::IObject
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::BaseSet"; }
      virtual ~BaseSet() {}
      virtual already_AddRefd<iface::SProS::BaseIterator>  iterateElements() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual void insert(iface::SProS::Base* b) throw(std::exception&) = 0;
      virtual void remove(iface::SProS::Base* b) throw(std::exception&) = 0;
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST BaseIterator
     : public virtual iface::XPCOM::IObject
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::BaseIterator"; }
      virtual ~BaseIterator() {}
      virtual already_AddRefd<iface::SProS::Base>  nextElement() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST SEDMLElement
     : public virtual iface::SProS::Base
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::SEDMLElement"; }
      virtual ~SEDMLElement() {}
      virtual uint32_t level() throw(std::exception&)  = 0;
      virtual void level(uint32_t attr) throw(std::exception&) = 0;
      virtual uint32_t version() throw(std::exception&)  = 0;
      virtual void version(uint32_t attr) throw(std::exception&) = 0;
      virtual already_AddRefd<iface::SProS::ModelSet>  models() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::SProS::TaskSet>  tasks() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::SProS::SimulationSet>  simulations() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::SProS::DataGeneratorSet>  generators() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::SProS::OutputSet>  outputs() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::SProS::Model>  createModel() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::SProS::UniformTimeCourse>  createUniformTimeCourse() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::SProS::RepeatedAnalysis>  createRepeatedAnalysis() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::SProS::Task>  createTask() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::SProS::DataGenerator>  createDataGenerator() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::SProS::Plot2D>  createPlot2D() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::SProS::Plot3D>  createPlot3D() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::SProS::Report>  createReport() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::SProS::ComputeChange>  createComputeChange() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::SProS::ChangeAttribute>  createChangeAttribute() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::SProS::AddXML>  createAddXML() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::SProS::RemoveXML>  createRemoveXML() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::SProS::ChangeXML>  createChangeXML() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::SProS::Variable>  createVariable() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::SProS::Parameter>  createParameter() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::SProS::Curve>  createCurve() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::SProS::Surface>  createSurface() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::SProS::DataSet>  createDataSet() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual std::wstring originalURL() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void originalURL(const std::wstring& attr) throw(std::exception&) = 0;
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST NamedElement
     : public virtual iface::SProS::Base
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::NamedElement"; }
      virtual ~NamedElement() {}
      virtual std::wstring name() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void name(const std::wstring& attr) throw(std::exception&) = 0;
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST NamedElementSet
     : public virtual iface::SProS::BaseSet
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::NamedElementSet"; }
      virtual ~NamedElementSet() {}
      virtual already_AddRefd<iface::SProS::NamedElementIterator>  iterateNamedElement() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST NamedElementIterator
     : public virtual iface::SProS::BaseIterator
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::NamedElementIterator"; }
      virtual ~NamedElementIterator() {}
      virtual already_AddRefd<iface::SProS::NamedElement>  nextNamedElement() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST NamedIdentifiedElement
     : public virtual iface::SProS::NamedElement
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::NamedIdentifiedElement"; }
      virtual ~NamedIdentifiedElement() {}
      virtual std::wstring id() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void id(const std::wstring& attr) throw(std::exception&) = 0;
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST NamedIdentifiedElementSet
     : public virtual iface::SProS::NamedElementSet
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::NamedIdentifiedElementSet"; }
      virtual ~NamedIdentifiedElementSet() {}
      virtual already_AddRefd<iface::SProS::NamedIdentifiedElementIterator>  iterateNamedIdentifiedElements() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::SProS::NamedIdentifiedElement>  getNamedIdentifiedElementByIdentifier(const std::wstring& idMatch) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST NamedIdentifiedElementIterator
     : public virtual iface::SProS::NamedElementIterator
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::NamedIdentifiedElementIterator"; }
      virtual ~NamedIdentifiedElementIterator() {}
      virtual already_AddRefd<iface::SProS::NamedIdentifiedElement>  nextNamedIdentifiedElement() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST Model
     : public virtual iface::SProS::NamedIdentifiedElement
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::Model"; }
      virtual ~Model() {}
      virtual std::wstring language() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void language(const std::wstring& attr) throw(std::exception&) = 0;
      virtual std::wstring source() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void source(const std::wstring& attr) throw(std::exception&) = 0;
      virtual already_AddRefd<iface::SProS::ChangeSet>  changes() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST ModelSet
     : public virtual iface::SProS::NamedIdentifiedElementSet
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::ModelSet"; }
      virtual ~ModelSet() {}
      virtual already_AddRefd<iface::SProS::ModelIterator>  iterateModels() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::SProS::Model>  getModelByIdentifier(const std::wstring& idMatch) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST ModelIterator
     : public virtual iface::SProS::NamedIdentifiedElementIterator
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::ModelIterator"; }
      virtual ~ModelIterator() {}
      virtual already_AddRefd<iface::SProS::Model>  nextModel() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST Simulation
     : public virtual iface::SProS::NamedIdentifiedElement
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::Simulation"; }
      virtual ~Simulation() {}
      virtual std::wstring algorithmKisaoID() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void algorithmKisaoID(const std::wstring& attr) throw(std::exception&) = 0;
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST SimulationSet
     : public virtual iface::SProS::NamedIdentifiedElementSet
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::SimulationSet"; }
      virtual ~SimulationSet() {}
      virtual already_AddRefd<iface::SProS::SimulationIterator>  iterateSimulations() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::SProS::Simulation>  getSimulationByIdentifier(const std::wstring& idMatch) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST SimulationIterator
     : public virtual iface::SProS::NamedIdentifiedElementIterator
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::SimulationIterator"; }
      virtual ~SimulationIterator() {}
      virtual already_AddRefd<iface::SProS::Simulation>  nextSimulation() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST UniformTimeCourse
     : public virtual iface::SProS::Simulation
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::UniformTimeCourse"; }
      virtual ~UniformTimeCourse() {}
      virtual double initialTime() throw(std::exception&)  = 0;
      virtual void initialTime(double attr) throw(std::exception&) = 0;
      virtual double outputStartTime() throw(std::exception&)  = 0;
      virtual void outputStartTime(double attr) throw(std::exception&) = 0;
      virtual double outputEndTime() throw(std::exception&)  = 0;
      virtual void outputEndTime(double attr) throw(std::exception&) = 0;
      virtual uint32_t numberOfPoints() throw(std::exception&)  = 0;
      virtual void numberOfPoints(uint32_t attr) throw(std::exception&) = 0;
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST RepeatedAnalysis
     : public virtual iface::SProS::UniformTimeCourse
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::RepeatedAnalysis"; }
      virtual ~RepeatedAnalysis() {}
      virtual uint32_t numberOfSamples() throw(std::exception&)  = 0;
      virtual void numberOfSamples(uint32_t attr) throw(std::exception&) = 0;
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST Task
     : public virtual iface::SProS::NamedIdentifiedElement
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::Task"; }
      virtual ~Task() {}
      virtual std::wstring simulationReferenceIdentifier() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void simulationReferenceIdentifier(const std::wstring& attr) throw(std::exception&) = 0;
      virtual already_AddRefd<iface::SProS::Simulation>  simulationReference() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void simulationReference(iface::SProS::Simulation* attr) throw(std::exception&) = 0;
      virtual std::wstring modelReferenceIdentifier() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void modelReferenceIdentifier(const std::wstring& attr) throw(std::exception&) = 0;
      virtual already_AddRefd<iface::SProS::Model>  modelReference() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void modelReference(iface::SProS::Model* attr) throw(std::exception&) = 0;
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST TaskSet
     : public virtual iface::SProS::NamedIdentifiedElementSet
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::TaskSet"; }
      virtual ~TaskSet() {}
      virtual already_AddRefd<iface::SProS::TaskIterator>  iterateTasks() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::SProS::Task>  getTaskByIdentifier(const std::wstring& idMatch) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST TaskIterator
     : public virtual iface::SProS::NamedIdentifiedElementIterator
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::TaskIterator"; }
      virtual ~TaskIterator() {}
      virtual already_AddRefd<iface::SProS::Task>  nextTask() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST DataGenerator
     : public virtual iface::SProS::NamedIdentifiedElement
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::DataGenerator"; }
      virtual ~DataGenerator() {}
      virtual already_AddRefd<iface::SProS::ParameterSet>  parameters() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::SProS::VariableSet>  variables() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::mathml_dom::MathMLMathElement>  math() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void math(iface::mathml_dom::MathMLMathElement* attr) throw(std::exception&) = 0;
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST DataGeneratorSet
     : public virtual iface::SProS::NamedIdentifiedElementSet
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::DataGeneratorSet"; }
      virtual ~DataGeneratorSet() {}
      virtual already_AddRefd<iface::SProS::DataGeneratorIterator>  iterateDataGenerators() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::SProS::DataGenerator>  getDataGeneratorByIdentifier(const std::wstring& idMatch) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST DataGeneratorIterator
     : public virtual iface::SProS::NamedIdentifiedElementIterator
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::DataGeneratorIterator"; }
      virtual ~DataGeneratorIterator() {}
      virtual already_AddRefd<iface::SProS::DataGenerator>  nextDataGenerator() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST Output
     : public virtual iface::SProS::NamedIdentifiedElement
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::Output"; }
      virtual ~Output() {}
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST OutputSet
     : public virtual iface::SProS::NamedIdentifiedElementSet
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::OutputSet"; }
      virtual ~OutputSet() {}
      virtual already_AddRefd<iface::SProS::OutputIterator>  iterateOutputs() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::SProS::Output>  getOutputByIdentifier(const std::wstring& idMatch) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST OutputIterator
     : public virtual iface::SProS::NamedIdentifiedElementIterator
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::OutputIterator"; }
      virtual ~OutputIterator() {}
      virtual already_AddRefd<iface::SProS::Output>  nextOutput() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST Plot2D
     : public virtual iface::SProS::Output
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::Plot2D"; }
      virtual ~Plot2D() {}
      virtual already_AddRefd<iface::SProS::CurveSet>  curves() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST Plot3D
     : public virtual iface::SProS::Output
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::Plot3D"; }
      virtual ~Plot3D() {}
      virtual already_AddRefd<iface::SProS::SurfaceSet>  surfaces() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST Report
     : public virtual iface::SProS::Output
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::Report"; }
      virtual ~Report() {}
      virtual already_AddRefd<iface::SProS::DataSetSet>  datasets() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST Change
     : public virtual iface::SProS::Base
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::Change"; }
      virtual ~Change() {}
      virtual std::wstring target() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void target(const std::wstring& attr) throw(std::exception&) = 0;
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST ChangeSet
     : public virtual iface::SProS::BaseSet
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::ChangeSet"; }
      virtual ~ChangeSet() {}
      virtual already_AddRefd<iface::SProS::ChangeIterator>  iterateChanges() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST ChangeIterator
     : public virtual iface::SProS::BaseIterator
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::ChangeIterator"; }
      virtual ~ChangeIterator() {}
      virtual already_AddRefd<iface::SProS::Change>  nextChange() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST ComputeChange
     : public virtual iface::SProS::Change
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::ComputeChange"; }
      virtual ~ComputeChange() {}
      virtual already_AddRefd<iface::SProS::VariableSet>  variables() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::SProS::ParameterSet>  parameters() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::mathml_dom::MathMLMathElement>  math() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void math(iface::mathml_dom::MathMLMathElement* attr) throw(std::exception&) = 0;
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST ChangeAttribute
     : public virtual iface::SProS::Change
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::ChangeAttribute"; }
      virtual ~ChangeAttribute() {}
      virtual std::wstring newValue() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST AddXML
     : public virtual iface::SProS::Change
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::AddXML"; }
      virtual ~AddXML() {}
      virtual already_AddRefd<iface::dom::NodeList>  anyXML() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST ChangeXML
     : public virtual iface::SProS::AddXML
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::ChangeXML"; }
      virtual ~ChangeXML() {}
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST RemoveXML
     : public virtual iface::SProS::Change
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::RemoveXML"; }
      virtual ~RemoveXML() {}
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST Variable
     : public virtual iface::SProS::NamedIdentifiedElement
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::Variable"; }
      virtual ~Variable() {}
      virtual std::wstring target() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void target(const std::wstring& attr) throw(std::exception&) = 0;
      virtual std::wstring symbol() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void symbol(const std::wstring& attr) throw(std::exception&) = 0;
      virtual std::wstring taskReferenceID() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void taskReferenceID(const std::wstring& attr) throw(std::exception&) = 0;
      virtual already_AddRefd<iface::SProS::Task>  taskReference() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void taskReference(iface::SProS::Task* attr) throw(std::exception&) = 0;
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST VariableSet
     : public virtual iface::SProS::NamedIdentifiedElementSet
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::VariableSet"; }
      virtual ~VariableSet() {}
      virtual already_AddRefd<iface::SProS::VariableIterator>  iterateVariables() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::SProS::Variable>  getVariableByIdentifier(const std::wstring& idMatch) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST VariableIterator
     : public virtual iface::SProS::NamedIdentifiedElementIterator
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::VariableIterator"; }
      virtual ~VariableIterator() {}
      virtual already_AddRefd<iface::SProS::Variable>  nextVariable() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST Parameter
     : public virtual iface::SProS::NamedIdentifiedElement
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::Parameter"; }
      virtual ~Parameter() {}
      virtual double value() throw(std::exception&)  = 0;
      virtual void value(double attr) throw(std::exception&) = 0;
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST ParameterSet
     : public virtual iface::SProS::NamedIdentifiedElementSet
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::ParameterSet"; }
      virtual ~ParameterSet() {}
      virtual already_AddRefd<iface::SProS::ParameterIterator>  iterateParameters() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::SProS::Parameter>  getParameterByIdentifier(const std::wstring& idMatch) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST ParameterIterator
     : public virtual iface::SProS::NamedIdentifiedElementIterator
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::ParameterIterator"; }
      virtual ~ParameterIterator() {}
      virtual already_AddRefd<iface::SProS::Parameter>  nextParameter() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST Curve
     : public virtual iface::SProS::NamedElement
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::Curve"; }
      virtual ~Curve() {}
      virtual bool logX() throw(std::exception&)  = 0;
      virtual void logX(bool attr) throw(std::exception&) = 0;
      virtual bool logY() throw(std::exception&)  = 0;
      virtual void logY(bool attr) throw(std::exception&) = 0;
      virtual std::wstring xDataGeneratorID() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void xDataGeneratorID(const std::wstring& attr) throw(std::exception&) = 0;
      virtual std::wstring yDataGeneratorID() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void yDataGeneratorID(const std::wstring& attr) throw(std::exception&) = 0;
      virtual already_AddRefd<iface::SProS::DataGenerator>  xDataGenerator() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void xDataGenerator(iface::SProS::DataGenerator* attr) throw(std::exception&) = 0;
      virtual already_AddRefd<iface::SProS::DataGenerator>  yDataGenerator() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void yDataGenerator(iface::SProS::DataGenerator* attr) throw(std::exception&) = 0;
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST CurveSet
     : public virtual iface::SProS::NamedElementSet
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::CurveSet"; }
      virtual ~CurveSet() {}
      virtual already_AddRefd<iface::SProS::CurveIterator>  iterateCurves() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST CurveIterator
     : public virtual iface::SProS::NamedElementIterator
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::CurveIterator"; }
      virtual ~CurveIterator() {}
      virtual already_AddRefd<iface::SProS::Curve>  nextCurve() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST Surface
     : public virtual iface::SProS::Curve
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::Surface"; }
      virtual ~Surface() {}
      virtual bool logZ() throw(std::exception&)  = 0;
      virtual void logZ(bool attr) throw(std::exception&) = 0;
      virtual std::wstring zDataGeneratorID() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void zDataGeneratorID(const std::wstring& attr) throw(std::exception&) = 0;
      virtual already_AddRefd<iface::SProS::DataGenerator>  zDataGenerator() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void zDataGenerator(iface::SProS::DataGenerator* attr) throw(std::exception&) = 0;
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST SurfaceSet
     : public virtual iface::SProS::CurveSet
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::SurfaceSet"; }
      virtual ~SurfaceSet() {}
      virtual already_AddRefd<iface::SProS::SurfaceIterator>  iterateSurfaces() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST SurfaceIterator
     : public virtual iface::SProS::CurveIterator
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::SurfaceIterator"; }
      virtual ~SurfaceIterator() {}
      virtual already_AddRefd<iface::SProS::Surface>  nextSurface() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST DataSet
     : public virtual iface::SProS::NamedElement
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::DataSet"; }
      virtual ~DataSet() {}
      virtual std::wstring dataGeneratorID() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void dataGeneratorID(const std::wstring& attr) throw(std::exception&) = 0;
      virtual already_AddRefd<iface::SProS::DataGenerator>  dataGen() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void dataGen(iface::SProS::DataGenerator* attr) throw(std::exception&) = 0;
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST DataSetSet
     : public virtual iface::SProS::NamedElementSet
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::DataSetSet"; }
      virtual ~DataSetSet() {}
      virtual already_AddRefd<iface::SProS::DataSetIterator>  iterateDataSets() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_SProS_PRE
    class  PUBLIC_SProS_POST DataSetIterator
     : public virtual iface::SProS::NamedElementIterator
    {
    public:
      static const char* INTERFACE_NAME() { return "SProS::DataSetIterator"; }
      virtual ~DataSetIterator() {}
      virtual already_AddRefd<iface::SProS::DataSet>  nextDataSet() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
  };
};
#undef PUBLIC_SProS_PRE
#undef PUBLIC_SProS_POST
#endif // guard
