/* This file is automatically generated from VACSS.idl
 * DO NOT EDIT DIRECTLY OR CHANGES WILL BE LOST!
 */
#ifndef _GUARD_IFACE_VACSS
#define _GUARD_IFACE_VACSS
#include "cda_compiler_support.h"
#ifdef MODULE_CONTAINS_VACSS
#define PUBLIC_VACSS_PRE CDA_EXPORT_PRE
#define PUBLIC_VACSS_POST CDA_EXPORT_POST
#else
#define PUBLIC_VACSS_PRE CDA_IMPORT_PRE
#define PUBLIC_VACSS_POST CDA_IMPORT_POST
#endif
#include "Ifacexpcom.hxx"
#include "IfaceDOM_APISPEC.hxx"
#include "IfaceMathML_content_APISPEC.hxx"
#include "IfaceCellML_APISPEC.hxx"
namespace iface
{
  namespace cellml_services
  {
    PUBLIC_VACSS_PRE
    class  PUBLIC_VACSS_POST CellMLValidityError
     : public virtual iface::XPCOM::IObject
    {
    public:
      static const char* INTERFACE_NAME() { return "cellml_services::CellMLValidityError"; }
      virtual ~CellMLValidityError() {}
      virtual std::wstring description() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual uint32_t nSupplements() throw(std::exception&)  = 0;
      virtual already_AddRefd<iface::cellml_services::CellMLValidityError>  getSupplement(uint32_t index) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual bool isWarningOnly() throw(std::exception&)  = 0;
    };
    PUBLIC_VACSS_PRE
    class  PUBLIC_VACSS_POST CellMLRepresentationValidityError
     : public virtual iface::cellml_services::CellMLValidityError
    {
    public:
      static const char* INTERFACE_NAME() { return "cellml_services::CellMLRepresentationValidityError"; }
      virtual ~CellMLRepresentationValidityError() {}
      virtual already_AddRefd<iface::dom::Node>  errorNode() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual uint32_t errorNodalOffset() throw(std::exception&)  = 0;
    };
    PUBLIC_VACSS_PRE
    class  PUBLIC_VACSS_POST CellMLSemanticValidityError
     : public virtual iface::cellml_services::CellMLValidityError
    {
    public:
      static const char* INTERFACE_NAME() { return "cellml_services::CellMLSemanticValidityError"; }
      virtual ~CellMLSemanticValidityError() {}
      virtual already_AddRefd<iface::cellml_api::CellMLElement>  errorElement() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_VACSS_PRE
    class  PUBLIC_VACSS_POST CellMLValidityErrorSet
     : public virtual iface::XPCOM::IObject
    {
    public:
      static const char* INTERFACE_NAME() { return "cellml_services::CellMLValidityErrorSet"; }
      virtual ~CellMLValidityErrorSet() {}
      virtual uint32_t nValidityErrors() throw(std::exception&)  = 0;
      virtual already_AddRefd<iface::cellml_services::CellMLValidityError>  getValidityError(uint32_t index) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_VACSS_PRE
    class  PUBLIC_VACSS_POST VACSService
     : public virtual iface::XPCOM::IObject
    {
    public:
      static const char* INTERFACE_NAME() { return "cellml_services::VACSService"; }
      virtual ~VACSService() {}
      virtual already_AddRefd<iface::cellml_services::CellMLValidityErrorSet>  validateModel(iface::cellml_api::Model* aModel) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual uint32_t getPositionInXML(iface::dom::Node* node, uint32_t nodalOffset, uint32_t* column) throw(std::exception&) = 0;
    };
  };
};
#undef PUBLIC_VACSS_PRE
#undef PUBLIC_VACSS_POST
#endif // guard
