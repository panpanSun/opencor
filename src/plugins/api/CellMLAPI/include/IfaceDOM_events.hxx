/* This file is automatically generated from DOM_events.idl
 * DO NOT EDIT DIRECTLY OR CHANGES WILL BE LOST!
 */
#ifndef _GUARD_IFACE_DOMevents
#define _GUARD_IFACE_DOMevents
#include "cda_compiler_support.h"
#ifdef MODULE_CONTAINS_DOMevents
#define PUBLIC_DOMevents_PRE CDA_EXPORT_PRE
#define PUBLIC_DOMevents_POST CDA_EXPORT_POST
#else
#define PUBLIC_DOMevents_PRE CDA_IMPORT_PRE
#define PUBLIC_DOMevents_POST CDA_IMPORT_POST
#endif
#include "Ifacexpcom.hxx"
#include "IfaceDOM_APISPEC.hxx"
namespace iface
{
  namespace events
  {
    typedef std::wstring& DOMString;
    typedef uint64_t DOMTimeStamp;
    typedef iface::dom::Node* Node;
    class EventListener;
    class Event;
    PUBLIC_DOMevents_PRE
    class  PUBLIC_DOMevents_POST EventException : public std::exception
    {
    public:
      EventException(){}
    };
    static const uint16_t UNSPECIFIED_EVENT_TYPE_ERR = 0;
    PUBLIC_DOMevents_PRE
    class  PUBLIC_DOMevents_POST EventTarget
     : public virtual iface::XPCOM::IObject
    {
    public:
      static const char* INTERFACE_NAME() { return "events::EventTarget"; }
      virtual ~EventTarget() {}
      virtual void addEventListener(const std::wstring& type, iface::events::EventListener* listener, bool useCapture) throw(std::exception&) = 0;
      virtual void removeEventListener(const std::wstring& type, iface::events::EventListener* listener, bool useCapture) throw(std::exception&) = 0;
      virtual bool dispatchEvent(iface::events::Event* evt) throw(std::exception&) = 0;
    };
    PUBLIC_DOMevents_PRE
    class  PUBLIC_DOMevents_POST EventListener
     : public virtual iface::XPCOM::IObject
    {
    public:
      static const char* INTERFACE_NAME() { return "events::EventListener"; }
      virtual ~EventListener() {}
      virtual void handleEvent(iface::events::Event* evt) throw(std::exception&) = 0;
    };
    PUBLIC_DOMevents_PRE
    class  PUBLIC_DOMevents_POST Event
     : public virtual iface::XPCOM::IObject
    {
    public:
      static const char* INTERFACE_NAME() { return "events::Event"; }
      virtual ~Event() {}
      static const uint16_t CAPTURING_PHASE = 1;
      static const uint16_t AT_TARGET = 2;
      static const uint16_t BUBBLING_PHASE = 3;
      virtual std::wstring type() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::events::EventTarget>  target() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::events::EventTarget>  currentTarget() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual uint16_t eventPhase() throw(std::exception&)  = 0;
      virtual bool bubbles() throw(std::exception&)  = 0;
      virtual bool cancelable() throw(std::exception&)  = 0;
      virtual uint64_t timeStamp() throw(std::exception&)  = 0;
      virtual void stopPropagation() throw(std::exception&) = 0;
      virtual void preventDefault() throw(std::exception&) = 0;
      virtual void initEvent(const std::wstring& eventTypeArg, bool canBubbleArg, bool cancelableArg) throw(std::exception&) = 0;
    };
    PUBLIC_DOMevents_PRE
    class  PUBLIC_DOMevents_POST DocumentEvent
     : public virtual iface::XPCOM::IObject
    {
    public:
      static const char* INTERFACE_NAME() { return "events::DocumentEvent"; }
      virtual ~DocumentEvent() {}
      virtual already_AddRefd<iface::events::Event>  createEvent(const std::wstring& domEventType) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_DOMevents_PRE
    class  PUBLIC_DOMevents_POST MutationEvent
     : public virtual iface::events::Event
    {
    public:
      static const char* INTERFACE_NAME() { return "events::MutationEvent"; }
      virtual ~MutationEvent() {}
      static const uint16_t MODIFICATION = 1;
      static const uint16_t ADDITION = 2;
      static const uint16_t REMOVAL = 3;
      virtual already_AddRefd<iface::dom::Node>  relatedNode() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual std::wstring prevValue() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual std::wstring newValue() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual std::wstring attrName() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual uint16_t attrChange() throw(std::exception&)  = 0;
      virtual void initMutationEvent(const std::wstring& typeArg, bool canBubbleArg, bool cancelableArg, iface::dom::Node* relatedNodeArg, const std::wstring& prevValueArg, const std::wstring& newValueArg, const std::wstring& attrNameArg, uint16_t attrChangeArg) throw(std::exception&) = 0;
    };
  };
};
#undef PUBLIC_DOMevents_PRE
#undef PUBLIC_DOMevents_POST
#endif // guard
