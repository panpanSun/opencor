/* This file is automatically generated from CUSES.idl
 * DO NOT EDIT DIRECTLY OR CHANGES WILL BE LOST!
 */
#ifndef _GUARD_IFACE_CUSES
#define _GUARD_IFACE_CUSES
#include "cda_compiler_support.h"
#ifdef MODULE_CONTAINS_CUSES
#define PUBLIC_CUSES_PRE CDA_EXPORT_PRE
#define PUBLIC_CUSES_POST CDA_EXPORT_POST
#else
#define PUBLIC_CUSES_PRE CDA_IMPORT_PRE
#define PUBLIC_CUSES_POST CDA_IMPORT_POST
#endif
#include "Ifacexpcom.hxx"
#include "IfaceDOM_APISPEC.hxx"
#include "IfaceMathML_content_APISPEC.hxx"
#include "IfaceCellML_APISPEC.hxx"
namespace iface
{
  namespace cellml_services
  {
    PUBLIC_CUSES_PRE
    class  PUBLIC_CUSES_POST BaseUnit
     : public virtual iface::XPCOM::IObject
    {
    public:
      static const char* INTERFACE_NAME() { return "cellml_services::BaseUnit"; }
      virtual ~BaseUnit() {}
      virtual std::wstring name() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CUSES_PRE
    class  PUBLIC_CUSES_POST UserBaseUnit
     : public virtual iface::cellml_services::BaseUnit
    {
    public:
      static const char* INTERFACE_NAME() { return "cellml_services::UserBaseUnit"; }
      virtual ~UserBaseUnit() {}
      virtual already_AddRefd<iface::cellml_api::Units>  cellmlUnits() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CUSES_PRE
    class  PUBLIC_CUSES_POST BaseUnitInstance
     : public virtual iface::XPCOM::IObject
    {
    public:
      static const char* INTERFACE_NAME() { return "cellml_services::BaseUnitInstance"; }
      virtual ~BaseUnitInstance() {}
      virtual already_AddRefd<iface::cellml_services::BaseUnit>  unit() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual double prefix() throw(std::exception&)  = 0;
      virtual double offset() throw(std::exception&)  = 0;
      virtual double exponent() throw(std::exception&)  = 0;
    };
    PUBLIC_CUSES_PRE
    class  PUBLIC_CUSES_POST CanonicalUnitRepresentation
     : public virtual iface::XPCOM::IObject
    {
    public:
      static const char* INTERFACE_NAME() { return "cellml_services::CanonicalUnitRepresentation"; }
      virtual ~CanonicalUnitRepresentation() {}
      virtual uint32_t length() throw(std::exception&)  = 0;
      virtual already_AddRefd<iface::cellml_services::BaseUnitInstance>  fetchBaseUnit(uint32_t index) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual bool compatibleWith(iface::cellml_services::CanonicalUnitRepresentation* aCompareWith) throw(std::exception&) = 0;
      virtual double convertUnits(iface::cellml_services::CanonicalUnitRepresentation* aConvertTo, double* offset) throw(std::exception&) = 0;
      virtual double siConversion(double* offset) throw(std::exception&) = 0;
      virtual void addBaseUnit(iface::cellml_services::BaseUnitInstance* baseUnit) throw(std::exception&) = 0;
      virtual already_AddRefd<iface::cellml_services::CanonicalUnitRepresentation>  mergeWith(double thisExponent, iface::cellml_services::CanonicalUnitRepresentation* other, double otherExponent) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CUSES_PRE
    class  PUBLIC_CUSES_POST CUSES
     : public virtual iface::XPCOM::IObject
    {
    public:
      static const char* INTERFACE_NAME() { return "cellml_services::CUSES"; }
      virtual ~CUSES() {}
      virtual std::wstring modelError() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::cellml_services::CanonicalUnitRepresentation>  getUnitsByName(iface::cellml_api::CellMLElement* aContext, const std::wstring& aName) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::cellml_services::CanonicalUnitRepresentation>  createEmptyUnits() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CUSES_PRE
    class  PUBLIC_CUSES_POST CUSESBootstrap
     : public virtual iface::XPCOM::IObject
    {
    public:
      static const char* INTERFACE_NAME() { return "cellml_services::CUSESBootstrap"; }
      virtual ~CUSESBootstrap() {}
      virtual already_AddRefd<iface::cellml_services::CUSES>  createCUSESForModel(iface::cellml_api::Model* aModel, bool aStrict) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
  };
};
#undef PUBLIC_CUSES_PRE
#undef PUBLIC_CUSES_POST
#endif // guard
