/* This file is automatically generated from RDF_APISPEC.idl
 * DO NOT EDIT DIRECTLY OR CHANGES WILL BE LOST!
 */
#ifndef _GUARD_IFACE_RDFAPISPEC
#define _GUARD_IFACE_RDFAPISPEC
#include "cda_compiler_support.h"
#ifdef MODULE_CONTAINS_RDFAPISPEC
#define PUBLIC_RDFAPISPEC_PRE CDA_EXPORT_PRE
#define PUBLIC_RDFAPISPEC_POST CDA_EXPORT_POST
#else
#define PUBLIC_RDFAPISPEC_PRE CDA_IMPORT_PRE
#define PUBLIC_RDFAPISPEC_POST CDA_IMPORT_POST
#endif
#include "Ifacexpcom.hxx"
#include "IfaceDOM_APISPEC.hxx"
#include "IfaceMathML_content_APISPEC.hxx"
#include "IfaceCellML_APISPEC.hxx"
namespace iface
{
  namespace rdf_api
  {
    class TripleSet;
    class Triple;
    class Resource;
    class URIReference;
    class BlankNode;
    class PlainLiteral;
    class TypedLiteral;
    class Container;
    PUBLIC_RDFAPISPEC_PRE
    class  PUBLIC_RDFAPISPEC_POST RDFProcessingError : public std::exception
    {
    public:
      RDFProcessingError(){}
    };
    PUBLIC_RDFAPISPEC_PRE
    class  PUBLIC_RDFAPISPEC_POST DataSource
     : public virtual iface::XPCOM::IObject
    {
    public:
      static const char* INTERFACE_NAME() { return "rdf_api::DataSource"; }
      virtual ~DataSource() {}
      virtual already_AddRefd<iface::rdf_api::URIReference>  getURIReference(const std::wstring& aURI) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::rdf_api::BlankNode>  createBlankNode() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::rdf_api::PlainLiteral>  getPlainLiteral(const std::wstring& aForm, const std::wstring& aLanguage) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::rdf_api::TypedLiteral>  getTypedLiteral(const std::wstring& aForm, const std::wstring& datatypeURI) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::rdf_api::TripleSet>  getAllTriples() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_RDFAPISPEC_PRE
    class  PUBLIC_RDFAPISPEC_POST Node
     : public virtual iface::XPCOM::IObject
    {
    public:
      static const char* INTERFACE_NAME() { return "rdf_api::Node"; }
      virtual ~Node() {}
      virtual already_AddRefd<iface::rdf_api::TripleSet>  getTriplesInto() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::rdf_api::TripleSet>  getTriplesIntoByPredicate(iface::rdf_api::Resource* aPredicate) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_RDFAPISPEC_PRE
    class  PUBLIC_RDFAPISPEC_POST Resource
     : public virtual iface::rdf_api::Node
    {
    public:
      static const char* INTERFACE_NAME() { return "rdf_api::Resource"; }
      virtual ~Resource() {}
      virtual already_AddRefd<iface::rdf_api::TripleSet>  getTriplesOutOfByPredicate(iface::rdf_api::Resource* aPredicate) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::rdf_api::Triple>  getTripleOutOfByPredicate(iface::rdf_api::Resource* aPredicate) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual bool hasTripleOutOf(iface::rdf_api::Resource* aPredicate, iface::rdf_api::Node* aObject) throw(std::exception&) = 0;
      virtual void createTripleOutOf(iface::rdf_api::Resource* aPredicate, iface::rdf_api::Node* aObject) throw(std::exception&) = 0;
      virtual already_AddRefd<iface::rdf_api::TripleSet>  getTriplesOutOfByObject(iface::rdf_api::Node* aObject) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::rdf_api::TripleSet>  getTriplesWherePredicate() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::rdf_api::TripleSet>  getTriplesWhereSubject() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::rdf_api::Container>  correspondingContainer() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::rdf_api::Container>  findOrMakeContainer(iface::rdf_api::Resource* aPredicate, iface::rdf_api::Resource* aContainerType) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual bool hasTripleOutOfWithPredicateAndObject(iface::rdf_api::Resource* aPredicate, iface::rdf_api::Node* aObject) throw(std::exception&) = 0;
      virtual already_AddRefd<iface::rdf_api::Triple>  getTripleOutOfByPredicateAndObject(iface::rdf_api::Resource* aPredicate, iface::rdf_api::Node* aObject) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_RDFAPISPEC_PRE
    class  PUBLIC_RDFAPISPEC_POST NodeIterator
     : public virtual iface::XPCOM::IObject
    {
    public:
      static const char* INTERFACE_NAME() { return "rdf_api::NodeIterator"; }
      virtual ~NodeIterator() {}
      virtual already_AddRefd<iface::rdf_api::Node>  getNextNode() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_RDFAPISPEC_PRE
    class  PUBLIC_RDFAPISPEC_POST Container
     : public virtual iface::XPCOM::IObject
    {
    public:
      static const char* INTERFACE_NAME() { return "rdf_api::Container"; }
      virtual ~Container() {}
      virtual already_AddRefd<iface::rdf_api::Resource>  correspondingResource() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::rdf_api::Resource>  containerType() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void containerType(iface::rdf_api::Resource* attr) throw(std::exception&) = 0;
      virtual already_AddRefd<iface::rdf_api::NodeIterator>  iterateChildren() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual void appendChild(iface::rdf_api::Node* aChild) throw(std::exception&) = 0;
      virtual void removeChild(iface::rdf_api::Node* aChild, bool aDoRenumbering) throw(std::exception&) = 0;
      virtual void renumberContainer() throw(std::exception&) = 0;
      virtual already_AddRefd<iface::rdf_api::Container>  mergeWith(iface::rdf_api::Container* aContainer) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_RDFAPISPEC_PRE
    class  PUBLIC_RDFAPISPEC_POST BlankNode
     : public virtual iface::rdf_api::Resource
    {
    public:
      static const char* INTERFACE_NAME() { return "rdf_api::BlankNode"; }
      virtual ~BlankNode() {}
    };
    PUBLIC_RDFAPISPEC_PRE
    class  PUBLIC_RDFAPISPEC_POST URIReference
     : public virtual iface::rdf_api::Resource
    {
    public:
      static const char* INTERFACE_NAME() { return "rdf_api::URIReference"; }
      virtual ~URIReference() {}
      virtual std::wstring URI() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_RDFAPISPEC_PRE
    class  PUBLIC_RDFAPISPEC_POST Literal
     : public virtual iface::rdf_api::Node
    {
    public:
      static const char* INTERFACE_NAME() { return "rdf_api::Literal"; }
      virtual ~Literal() {}
      virtual std::wstring lexicalForm() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_RDFAPISPEC_PRE
    class  PUBLIC_RDFAPISPEC_POST PlainLiteral
     : public virtual iface::rdf_api::Literal
    {
    public:
      static const char* INTERFACE_NAME() { return "rdf_api::PlainLiteral"; }
      virtual ~PlainLiteral() {}
      virtual std::wstring language() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_RDFAPISPEC_PRE
    class  PUBLIC_RDFAPISPEC_POST TypedLiteral
     : public virtual iface::rdf_api::Literal
    {
    public:
      static const char* INTERFACE_NAME() { return "rdf_api::TypedLiteral"; }
      virtual ~TypedLiteral() {}
      virtual std::wstring datatypeURI() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_RDFAPISPEC_PRE
    class  PUBLIC_RDFAPISPEC_POST Triple
     : public virtual iface::XPCOM::IObject
    {
    public:
      static const char* INTERFACE_NAME() { return "rdf_api::Triple"; }
      virtual ~Triple() {}
      virtual already_AddRefd<iface::rdf_api::Resource>  subject() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::rdf_api::Resource>  predicate() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::rdf_api::Node>  object() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void unassert() throw(std::exception&) = 0;
    };
    PUBLIC_RDFAPISPEC_PRE
    class  PUBLIC_RDFAPISPEC_POST TripleEnumerator
     : public virtual iface::XPCOM::IObject
    {
    public:
      static const char* INTERFACE_NAME() { return "rdf_api::TripleEnumerator"; }
      virtual ~TripleEnumerator() {}
      virtual already_AddRefd<iface::rdf_api::Triple>  getNextTriple() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_RDFAPISPEC_PRE
    class  PUBLIC_RDFAPISPEC_POST TripleSet
     : public virtual iface::XPCOM::IObject
    {
    public:
      static const char* INTERFACE_NAME() { return "rdf_api::TripleSet"; }
      virtual ~TripleSet() {}
      virtual already_AddRefd<iface::rdf_api::TripleEnumerator>  enumerateTriples() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_RDFAPISPEC_PRE
    class  PUBLIC_RDFAPISPEC_POST Bootstrap
     : public virtual iface::XPCOM::IObject
    {
    public:
      static const char* INTERFACE_NAME() { return "rdf_api::Bootstrap"; }
      virtual ~Bootstrap() {}
      virtual already_AddRefd<iface::rdf_api::DataSource>  createDataSource() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual void parseIntoDataSource(iface::rdf_api::DataSource* ds, iface::dom::Element* root, const std::wstring& baseURI) throw(std::exception&) = 0;
      virtual already_AddRefd<iface::dom::Document>  getDOMForDataSource(iface::rdf_api::DataSource* ds, const std::wstring& baseURI) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual std::wstring serialiseDataSource(iface::rdf_api::DataSource* ds, const std::wstring& baseURI) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_RDFAPISPEC_PRE
    class  PUBLIC_RDFAPISPEC_POST RDFAPIRepresentation
     : public virtual iface::cellml_api::RDFRepresentation
    {
    public:
      static const char* INTERFACE_NAME() { return "rdf_api::RDFAPIRepresentation"; }
      virtual ~RDFAPIRepresentation() {}
      virtual already_AddRefd<iface::rdf_api::DataSource>  source() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void source(iface::rdf_api::DataSource* attr) throw(std::exception&) = 0;
    };
  };
};
#undef PUBLIC_RDFAPISPEC_PRE
#undef PUBLIC_RDFAPISPEC_POST
#endif // guard
