/* This file is automatically generated from MaLaES.idl
 * DO NOT EDIT DIRECTLY OR CHANGES WILL BE LOST!
 */
#ifndef _GUARD_IFACE_MaLaES
#define _GUARD_IFACE_MaLaES
#include "cda_compiler_support.h"
#ifdef MODULE_CONTAINS_MaLaES
#define PUBLIC_MaLaES_PRE CDA_EXPORT_PRE
#define PUBLIC_MaLaES_POST CDA_EXPORT_POST
#else
#define PUBLIC_MaLaES_PRE CDA_IMPORT_PRE
#define PUBLIC_MaLaES_POST CDA_IMPORT_POST
#endif
#include "Ifacexpcom.hxx"
#include "IfaceDOM_APISPEC.hxx"
#include "IfaceMathML_content_APISPEC.hxx"
#include "IfaceCellML_APISPEC.hxx"
#include "IfaceCUSES.hxx"
#include "IfaceAnnoTools.hxx"
#include "IfaceCeVAS.hxx"
namespace iface
{
  namespace cellml_services
  {
    PUBLIC_MaLaES_PRE
    class  PUBLIC_MaLaES_POST DegreeVariable
     : public virtual iface::XPCOM::IObject
    {
    public:
      static const char* INTERFACE_NAME() { return "cellml_services::DegreeVariable"; }
      virtual ~DegreeVariable() {}
      virtual already_AddRefd<iface::cellml_api::CellMLVariable>  variable() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual uint32_t degree() throw(std::exception&)  = 0;
      virtual bool appearedUndelayed() throw(std::exception&)  = 0;
      virtual bool appearedInfinitesimallyDelayed() throw(std::exception&)  = 0;
    };
    PUBLIC_MaLaES_PRE
    class  PUBLIC_MaLaES_POST DegreeVariableIterator
     : public virtual iface::XPCOM::IObject
    {
    public:
      static const char* INTERFACE_NAME() { return "cellml_services::DegreeVariableIterator"; }
      virtual ~DegreeVariableIterator() {}
      virtual already_AddRefd<iface::cellml_services::DegreeVariable>  nextDegreeVariable() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_MaLaES_PRE
    class  PUBLIC_MaLaES_POST MaLaESResult
     : public virtual iface::XPCOM::IObject
    {
    public:
      static const char* INTERFACE_NAME() { return "cellml_services::MaLaESResult"; }
      virtual ~MaLaESResult() {}
      virtual std::wstring compileErrors() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual std::wstring expression() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual uint32_t supplementariesLength() throw(std::exception&)  = 0;
      virtual std::wstring getSupplementary(uint32_t index) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::cellml_api::CellMLVariableIterator>  iterateInvolvedVariables() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::cellml_services::DegreeVariableIterator>  iterateInvolvedVariablesByDegree() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::cellml_api::CellMLVariableIterator>  iterateBoundVariables() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::cellml_api::CellMLVariableIterator>  iterateLocallyBoundVariables() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual uint32_t getDiffDegree(iface::cellml_api::CellMLVariable* aVar) throw(std::exception&) = 0;
      virtual bool involvesExternalCode() throw(std::exception&)  = 0;
    };
    PUBLIC_MaLaES_PRE
    class  PUBLIC_MaLaES_POST MaLaESTransform
     : public virtual iface::XPCOM::IObject
    {
    public:
      static const char* INTERFACE_NAME() { return "cellml_services::MaLaESTransform"; }
      virtual ~MaLaESTransform() {}
      virtual std::wstring compileErrors() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::cellml_services::MaLaESResult>  transform(iface::cellml_services::CeVAS* aCeVAS, iface::cellml_services::CUSES* aCUSES, iface::cellml_services::AnnotationSet* aAnnos, iface::mathml_dom::MathMLElement* aMathML, iface::cellml_api::CellMLElement* aContext, iface::cellml_api::CellMLVariable* aUnitsOf, iface::cellml_api::CellMLVariable* aBoundUnitsOf, uint32_t aUnitsDiffDegree) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual void stripPassthrough(iface::cellml_api::Model* aModel) throw(std::exception&) = 0;
    };
    PUBLIC_MaLaES_PRE
    class  PUBLIC_MaLaES_POST MaLaESBootstrap
     : public virtual iface::XPCOM::IObject
    {
    public:
      static const char* INTERFACE_NAME() { return "cellml_services::MaLaESBootstrap"; }
      virtual ~MaLaESBootstrap() {}
      virtual already_AddRefd<iface::cellml_services::MaLaESTransform>  compileTransformer(const std::wstring& specification) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
  };
};
#undef PUBLIC_MaLaES_PRE
#undef PUBLIC_MaLaES_POST
#endif // guard
