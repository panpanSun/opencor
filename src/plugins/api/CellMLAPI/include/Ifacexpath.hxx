/* This file is automatically generated from xpath.idl
 * DO NOT EDIT DIRECTLY OR CHANGES WILL BE LOST!
 */
#ifndef _GUARD_IFACE_xpath
#define _GUARD_IFACE_xpath
#include "cda_compiler_support.h"
#ifdef MODULE_CONTAINS_xpath
#define PUBLIC_xpath_PRE CDA_EXPORT_PRE
#define PUBLIC_xpath_POST CDA_EXPORT_POST
#else
#define PUBLIC_xpath_PRE CDA_IMPORT_PRE
#define PUBLIC_xpath_POST CDA_IMPORT_POST
#endif
#include "Ifacexpcom.hxx"
#include "IfaceDOM_APISPEC.hxx"
namespace iface
{
  namespace xpath
  {
    typedef std::wstring& DOMString;
    typedef iface::dom::Node* Node;
    typedef iface::dom::Element* Element;
    class XPathNSResolver;
    class XPathExpression;
    class XPathResult;
    PUBLIC_xpath_PRE
    class  PUBLIC_xpath_POST XPathException : public std::exception
    {
    public:
      XPathException(){}
    };
    static const uint16_t INVALID_EXPRESSION_ERR = 51;
    static const uint16_t TYPE_ERR = 52;
    PUBLIC_xpath_PRE
    class  PUBLIC_xpath_POST XPathEvaluator
     : public virtual iface::XPCOM::IObject
    {
    public:
      static const char* INTERFACE_NAME() { return "xpath::XPathEvaluator"; }
      virtual ~XPathEvaluator() {}
      virtual already_AddRefd<iface::xpath::XPathExpression>  createExpression(const std::wstring& expression, iface::xpath::XPathNSResolver* resolver) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::xpath::XPathNSResolver>  createNSResolver(iface::dom::Node* nodeResolver) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::xpath::XPathResult>  evaluate(const std::wstring& expression, iface::dom::Node* contextNode, iface::xpath::XPathNSResolver* resolver, uint16_t type, iface::xpath::XPathResult* result) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_xpath_PRE
    class  PUBLIC_xpath_POST XPathExpression
     : public virtual iface::XPCOM::IObject
    {
    public:
      static const char* INTERFACE_NAME() { return "xpath::XPathExpression"; }
      virtual ~XPathExpression() {}
      virtual already_AddRefd<iface::xpath::XPathResult>  evaluate(iface::dom::Node* contextNode, uint16_t type, iface::xpath::XPathResult* result) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_xpath_PRE
    class  PUBLIC_xpath_POST XPathNSResolver
     : public virtual iface::XPCOM::IObject
    {
    public:
      static const char* INTERFACE_NAME() { return "xpath::XPathNSResolver"; }
      virtual ~XPathNSResolver() {}
      virtual std::wstring lookupNamespaceURI(const std::wstring& prefix) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_xpath_PRE
    class  PUBLIC_xpath_POST XPathResult
     : public virtual iface::XPCOM::IObject
    {
    public:
      static const char* INTERFACE_NAME() { return "xpath::XPathResult"; }
      virtual ~XPathResult() {}
      static const uint16_t ANY_TYPE = 0;
      static const uint16_t NUMBER_TYPE = 1;
      static const uint16_t STRING_TYPE = 2;
      static const uint16_t BOOLEAN_TYPE = 3;
      static const uint16_t UNORDERED_NODE_ITERATOR_TYPE = 4;
      static const uint16_t ORDERED_NODE_ITERATOR_TYPE = 5;
      static const uint16_t UNORDERED_NODE_SNAPSHOT_TYPE = 6;
      static const uint16_t ORDERED_NODE_SNAPSHOT_TYPE = 7;
      static const uint16_t ANY_UNORDERED_NODE_TYPE = 8;
      static const uint16_t FIRST_ORDERED_NODE_TYPE = 9;
      virtual uint16_t resultType() throw(std::exception&)  = 0;
      virtual double numberValue() throw(std::exception&)  = 0;
      virtual std::wstring stringValue() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual bool booleanValue() throw(std::exception&)  = 0;
      virtual already_AddRefd<iface::dom::Node>  singleNodeValue() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual bool invalidIteratorState() throw(std::exception&)  = 0;
      virtual uint32_t snapshotLength() throw(std::exception&)  = 0;
      virtual already_AddRefd<iface::dom::Node>  iterateNext() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::dom::Node>  snapshotItem(uint32_t index) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_xpath_PRE
    class  PUBLIC_xpath_POST XPathNamespace
     : public virtual iface::dom::Node
    {
    public:
      static const char* INTERFACE_NAME() { return "xpath::XPathNamespace"; }
      virtual ~XPathNamespace() {}
      static const uint16_t XPATH_NAMESPACE_NODE = 13;
      virtual already_AddRefd<iface::dom::Element>  ownerElement() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
    };
  };
};
#undef PUBLIC_xpath_PRE
#undef PUBLIC_xpath_POST
#endif // guard
