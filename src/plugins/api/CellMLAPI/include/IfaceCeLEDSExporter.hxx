/* This file is automatically generated from CeLEDSExporter.idl
 * DO NOT EDIT DIRECTLY OR CHANGES WILL BE LOST!
 */
#ifndef _GUARD_IFACE_CeLEDSExporter
#define _GUARD_IFACE_CeLEDSExporter
#include "cda_compiler_support.h"
#ifdef MODULE_CONTAINS_CeLEDSExporter
#define PUBLIC_CeLEDSExporter_PRE CDA_EXPORT_PRE
#define PUBLIC_CeLEDSExporter_POST CDA_EXPORT_POST
#else
#define PUBLIC_CeLEDSExporter_PRE CDA_IMPORT_PRE
#define PUBLIC_CeLEDSExporter_POST CDA_IMPORT_POST
#endif
#include "Ifacexpcom.hxx"
#include "IfaceDOM_APISPEC.hxx"
#include "IfaceMathML_content_APISPEC.hxx"
#include "IfaceCellML_APISPEC.hxx"
#include "IfaceCUSES.hxx"
#include "IfaceAnnoTools.hxx"
#include "IfaceCeVAS.hxx"
#include "IfaceMaLaES.hxx"
#include "IfaceCeLEDS.hxx"
#include "IfaceCCGS.hxx"
namespace iface
{
  namespace cellml_services
  {
    PUBLIC_CeLEDSExporter_PRE
    class  PUBLIC_CeLEDSExporter_POST CodeExporter
     : public virtual iface::XPCOM::IObject
    {
    public:
      static const char* INTERFACE_NAME() { return "cellml_services::CodeExporter"; }
      virtual ~CodeExporter() {}
      virtual double rangeStart() throw(std::exception&)  = 0;
      virtual void rangeStart(double attr) throw(std::exception&) = 0;
      virtual double rangeEnd() throw(std::exception&)  = 0;
      virtual void rangeEnd(double attr) throw(std::exception&) = 0;
      virtual double absTol() throw(std::exception&)  = 0;
      virtual void absTol(double attr) throw(std::exception&) = 0;
      virtual double relTol() throw(std::exception&)  = 0;
      virtual void relTol(double attr) throw(std::exception&) = 0;
      virtual double maxStep() throw(std::exception&)  = 0;
      virtual void maxStep(double attr) throw(std::exception&) = 0;
      virtual std::wstring generateCode(iface::cellml_api::Model* model) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CeLEDSExporter_PRE
    class  PUBLIC_CeLEDSExporter_POST CeLEDSExporterBootstrap
     : public virtual iface::XPCOM::IObject
    {
    public:
      static const char* INTERFACE_NAME() { return "cellml_services::CeLEDSExporterBootstrap"; }
      virtual ~CeLEDSExporterBootstrap() {}
      virtual already_AddRefd<iface::cellml_services::DictionaryGenerator>  createDictGenerator(const std::wstring& URL) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::cellml_services::DictionaryGenerator>  createDictGeneratorFromText(const std::wstring& XMLText) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::cellml_services::CodeExporter>  createExporter(const std::wstring& URL) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::cellml_services::CodeExporter>  createExporterFromText(const std::wstring& XMLText) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual std::wstring loadError() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
    };
  };
};
#undef PUBLIC_CeLEDSExporter_PRE
#undef PUBLIC_CeLEDSExporter_POST
#endif // guard
